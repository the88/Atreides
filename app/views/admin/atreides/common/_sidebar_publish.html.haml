- selected = (resource.pending? || resource.published?) ? (resource.published_at? ? :published_at : :published_now) : resource.state.to_sym
- timezone = resource.time_zone || Atreides::TimeZone::DEFAULT
- published_at_value = (resource.published_at || Time.now).in_time_zone(timezone) # Needed to show time in user's TZ
- label = resource.published_at.past? ? "Published on: " : "Will be published on:"
= f.input :state, :as => "select", :collection => resource.states_for_select, :selected => selected, :include_blank => false, :wrapper_html => { :class => "post-states" }, :input_html => {:class => "publish-input"}
= f.input :state, :as => "hidden", :wrapper_html => { :class => "post-hidden" }, :input_html => {:class => "state-input"}
.date-input{:style => "padding-bottom: 15px"}
  = f.input :published_at, :label => label, :as => "string", :wrapper_html => { :class => "date-input date-picker", :style => "display:#{selected==:published_at ? 'block' : 'none'}"}, :input_html => {:value => published_at_value.to_s(:picker)}
  - unless defined?(no_timezone) && no_timezone == true
    - resource_name = resource.class.name.split("::").last.underscore
    - selected_timezone = resource.time_zone || "newyork"
    %label Select Time Zone:
    - Atreides::TimeZone::ZONES.each do |zone|
      .input.radio
        %input{:type => "radio", :name => "#{resource_name}[time_zone]", :value => zone, :id => "#{resource_name}_time_zone_#{zone.parameterize}", :checked => zone == selected_timezone}
        %label{:for => "#{resource_name}_time_zone_#{zone.parameterize}"}= zone